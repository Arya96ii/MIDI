// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App API and should be used
// in your Windows application via an official binary distribution.
// Further information: https://github.com/microsoft/MIDI/
// ============================================================================

import "MidiEndpointConnection.idl";
import "MidiOutputEndpointConnection.idl";
import "MidiInputEndpointConnection.idl";
import "MidiBidirectionalEndpointConnection.idl";

import "IMidiEndpointConnectionSettings.idl";
import "MidiSessionSettings.idl";
import "MidiMessageClientFilterStrategy.idl";

namespace Windows.Devices.Midi2
{
    [default_interface]
    runtimeclass MidiSession : Windows.Foundation.IClosable
    {
        String Id { get; };
        String Name{ get; };
        MidiSessionSettings Settings{ get; };

        // captures the PID, app name, etc.
        static MidiSession CreateSession(String sessionName, MidiSessionSettings settings);

        Boolean IsOpen { get; };

        // close the session and release resources
        // Not needed here because IClosable.Close() is used by .net and other managed languages
        //void Close();


        // this really should be read-only to users of this class
        IMapView<String, MidiEndpointConnection> Connections{ get; };


        // connects to an output-only endpoint. Typically only for MIDI 1.0 devices.
        // Call this as many times as needed to get different logical connections
        // Each logical connection for a single endpoint shares the same IO stream and
        // service connection.
        MidiOutputEndpointConnection ConnectOutputEndpoint(
            String midiEndpointId, 
            String tag,
            IMidiEndpointConnectionSettings settings);

        // connects to an input-only endpoint. Typically only for MIDI 1.0 devices.
        // Call this as many times as needed to get different logical connections
        // different filters (like a connection per group or function block, if you'd like)
        // The filters only affect incoming messages. Outgoing messages are not touched.
        MidiInputEndpointConnection ConnectInputEndpoint(
            String midiEndpointId,
            String tag,
            IMidiEndpointConnectionSettings settings);

        // connects to a bidirectional endpoint. For MIDI 2.0 devices, this will be the norm. 
        // see notes above.
        MidiBidirectionalEndpointConnection ConnectBidirectionalEndpoint(
            String midiEndpointId,
            String tag,
            IMidiEndpointConnectionSettings settings);

        // note that this takes the connection instance id, not the endpoint id itself
        // This will remove a single endpoint connection instance. If it's the last one
        // for that endpoint, it will remove/cleanup the underlying service interface and
        // resources for that endpoint.
        void DisconnectEndpointConnectionInstance(String endpointConnectionInstanceId);

        // this takes an endpoint id and tears down ALL endpoint connection instances for it, and
        // also disconnects the service interface for this endpoint
        void DisconnectAllConnectionsForEndpoint(String endpointId);

    }
}