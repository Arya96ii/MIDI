// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App API and should be used
// in your Windows application via an official binary distribution.
// Further information: https://github.com/microsoft/MIDI/
// ============================================================================


// a responder only because it may need to ack/nack messages
// This isn't a full CI implementation. You'll find the stuff that is geared
// towards what a virtual MIDI device would do (example: provide profiles) in the SDK
// Remember: applications using MIDI should not be declaring function blocks and
// CI capabilities unless they are the sole owner of a virtual endpoint, and are
// therefore themselves a "device"

#include "midl_defines.h"
MIDI_IDL_IMPORT


// TODO: Evaluate if this needs to be in API for caching purposes, or if it can live in the SDK instead


import "IMidiEndpointMessageListener.idl";
import "IMidiEndpointMessageResponder.idl";

namespace Windows.Devices.Midi2
{
    [MIDI_API_CONTRACT(1)]
    [default_interface]
    runtimeclass MidiCiProxy : IMidiEndpointMessageListener, IMidiEndpointMessageResponder
    {
        MidiCiProxy();

        // can also consider just having an observable vector which contains the info, and that will
        // raise the notifications to anyone interested in it. May end up going that route instead. Just
        // keep vectors of profiles, properties, etc.
        //event Windows.Foundation.TypedEventHandler<IInspectable, MidiProfileAddedEventArgs> ProfileAdded;
        //event Windows.Foundation.TypedEventHandler<IInspectable, MidiProfileRemovedEventArgs> ProfileRemoved;

        //event Windows.Foundation.TypedEventHandler<IInspectable, MidiProfileRemovedEventArgs> ProfileEnabled;
        //event Windows.Foundation.TypedEventHandler<IInspectable, MidiProfileRemovedEventArgs> ProfileDisabled;

        //// also need stuff for the MUID, but can keep that in a table instead of a bunch of events

        //// These would be good candidates for being async

        //SomeMidiPropertyCapsStructure GetPropertyExchangeCapabilities();       

        //MidiPropertyData GetPropertyData(MidiUniqueId destinationMuid, String requestHeaderData, bool subscribe);
        //bool GetPropertyData(MidiUniqueId destinationMuid, String requestHeaderData, bool subscribe);


        // TODO: SDK can include helpers for building the request header


    }
}


