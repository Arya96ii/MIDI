// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services Client SDK and should be used
// in your Windows application via an official binary distribution.
// Further information: https://github.com/microsoft/MIDI/
// ============================================================================


import "MidiEndpointInformation.idl";
import "MidiGroupTerminalBlock.idl";
import "MidiFunctionBlock.idl";
import "MidiEndpointType.idl";
import "Ump.idl";

namespace Microsoft.Devices.Midi2
{
    enum MidiDeviceSelectorMidiProtocol
    {
        All = 0,            // All MIDI protocols (currently only 1.0 and 2.0)
        Midi10 = 100,       // UMP Endpoints that connect to a MIDI 1.0 device (remapped by the service, or specified by the endpoint)
        Midi20 = 200        // MIDI 2.0 Endpoints (which may have group/function blocks that are MIDI 1.0)
    };

    [default_interface]
    runtimeclass MidiEndpoint
    {
        MidiEndpoint();

        // device selector for a device which implements a specific MIDI protocol
        static String GetDeviceSelectorForMidiProtocolDevice(MidiDeviceSelectorMidiProtocol midiProtocol);

        // device selector for all compatible devices
        static String GetDeviceSelector();

        // Id from Windows
        String DeviceId{ get; };

        // TODO: the other types of names (user-provided, device-provided, etc.)
        
        Boolean EndpointInformationValid{ get; };               // needed because UMP doesn't allow null types
        MidiEndpointInformation EndpointInformation{ get; };    // information from Endpoint Info request. Not valid until EndpointInformation requested and received.

        // from Windows - tells us if this is a converted MIDI 1.0 byte stream port, or native UMP endpoint
        MidiEndpointType EndpointType{ get; };

        // Blocks which tell us how to treat the groups
        IObservableVector<MidiFunctionBlock>FunctionBlocks { get; };  // these are discovered in-protocol
        IVector<MidiGroupTerminalBlock>GroupTerminalBlocks { get; };  // these are USB-specific, created at enumeration time, and do not change


        // Send a single strongly-typed UMP with a timestamp
        void SendUmp(UInt64 timestamp, Microsoft.Devices.Midi2.Ump ump);

        // send multiple strongly-typed UMPs
        void SendMultipleUmps(UInt64 timestamp, IVector<Ump> umps);

        // Send a vector of words
        void SendMultipleUmpsAsWords(UInt64 timestamp, IVector<UInt32> umpWords);


        // TODO: Some additional calls for information gathering.
        // Property Exchange handling
        //  - Get patches, for example
        // Profile capture
        // more
        // We won't store the values here, as they are by endpoint, group, and channel, but will provide
        // functions to easily request the information

    }
}