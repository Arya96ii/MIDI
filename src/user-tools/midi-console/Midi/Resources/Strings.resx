<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppDescription" xml:space="preserve">
    <value>Utility application for interacting with Windows MIDI Services from the command line. Requires that Windows MIDI Services is installed and enabled on the PC.</value>
  </data>
  <data name="AppTitle" xml:space="preserve">
    <value>[fuchsia on black]Microsoft Windows MIDI Services Console[/]</value>
  </data>
  <data name="CommandCheckHealthDescription" xml:space="preserve">
    <value>Basic testing for Windows MIDI Services</value>
  </data>
  <data name="CommandDiagnosticsReportDescription" xml:space="preserve">
    <value>Generate a report, typically for a support request, or for use when filing a bug</value>
  </data>
  <data name="CommandEnumerateEndpointsDescription" xml:space="preserve">
    <value>List MIDI UMP endpoints visible to Windows MIDI Services-aware applications</value>
  </data>
  <data name="CommandEnumerateLegacyEndpointsDescription" xml:space="preserve">
    <value>List MIDI 1.0 endpoints as seen in apps using older MIDI APIs</value>
  </data>
  <data name="CommandMonitorEndpointDescription" xml:space="preserve">
    <value>Monitors a UMP endpoint for incoming messages</value>
  </data>
  <data name="CommandSendMessageDescription" xml:space="preserve">
    <value>Send a single message to a UMP endpoint as a list of up to four 32 bit MIDI words</value>
  </data>
  <data name="CommandSendMessagesFileDescription" xml:space="preserve">
    <value>Sends a text file of UMP MIDI words to the specified endpoint. Each line in the file is a single message of 1-4 words delimited by spaces</value>
  </data>
  <data name="ErrorUnableToCreateSession" xml:space="preserve">
    <value>[darkred]Unable to create session.[/]</value>
  </data>
  <data name="ErrorUnableToOpenEndpoint" xml:space="preserve">
    <value>[darkred]Unable to open specified endpoint.[/]</value>
  </data>
  <data name="ParameterCheckHealthLoopback" xml:space="preserve">
    <value>Perform a loopback test</value>
  </data>
  <data name="ParameterCommonInstanceIdDescription" xml:space="preserve">
    <value>Instance Id of the endpoint</value>
  </data>
  <data name="ParameterEnumEndpointsDirection" xml:space="preserve">
    <value>The direction of data flow for the endpoints to list</value>
  </data>
  <data name="ParameterEnumEndpointsIncludeInstanceId" xml:space="preserve">
    <value>Include the UMP device instance id in the output</value>
  </data>
  <data name="ParameterEnumLegacyEndpointsDirection" xml:space="preserve">
    <value>The direction of data flow for the endpoints to list</value>
  </data>
  <data name="ParameterEnumLegacyEndpointsIncludeInstanceId" xml:space="preserve">
    <value>Include the MIDI 1.0 device instance id in the output</value>
  </data>
  <data name="ParameterMonitorEndpointDirectionDescription" xml:space="preserve">
    <value>The direction of the endpoint referenced by the Id. If this doesn't match the endpoint type, the connection will fail.</value>
  </data>
  <data name="ParameterMonitorEndpointSingleMessage" xml:space="preserve">
    <value>Wait for a single incoming message only</value>
  </data>
  <data name="ParameterSendMessageCount" xml:space="preserve">
    <value>Number of times to send this message</value>
  </data>
  <data name="ParameterSendMessageDelayBetweenMessages" xml:space="preserve">
    <value>Delay, in milliseconds, between messages. This is an approximate delay. Specify 0 for no delay.</value>
  </data>
  <data name="ParameterSendMessageEndpointDirectionDescription" xml:space="preserve">
    <value>The direction of the endpoint referenced by the Id. If this doesn't match the endpoint type, the connection will fail.</value>
  </data>
  <data name="ParameterSendMessagesFileCommandFile" xml:space="preserve">
    <value>Path and filename of the text file to send</value>
  </data>
  <data name="ParameterSendMessageWords" xml:space="preserve">
    <value>32-bit MIDI words, typically in hexadecimal 0x00000000 format. Use the parameter name in front of each word sent.</value>
  </data>
  <data name="StatusCreatingSessionAndOpeningEndpoint" xml:space="preserve">
    <value>Creating session and opening endpoint...</value>
  </data>
</root>