// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App SDK and should be used
// in your Windows application via an official binary distribution.
// Further information: https://github.com/microsoft/MIDI/
// ============================================================================

import "UmpWithTimestamp.idl";

namespace Microsoft.Devices.Midi2
{
    [default_interface]
    runtimeclass MidiMessagesReceivedEventArgs
    {
        MidiMessagesReceivedEventArgs();

        // TODO: Decide if we just want a reference to the MidiEndpoint here instead of a fat string
        String SourceMidiEndpointId{ get; set; };

        // this creates copies of the data from the buffer, which is important
        // in casees where the buffer is rapidly filling up and the app wants to
        // do some longer processing
        IVector<Microsoft.Devices.Midi2.UmpWithTimestamp> GetMessagesList();

        // todo: potentially a method to get the raw buffer. Some danger here
        // with the contents changing though, as it's a circular buffer, not
        // a copy of the data. Don't want to build in a known race condition.
        // we may just need to memcopy the buffer into app memory space for 
        // this to be safe. We can then provide an optional message reader which
        // will spit out strongly typed messages in a stream reader type fashion
        // This is simply to accommodate different app coding approaches.
    }
}