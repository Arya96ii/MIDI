// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App SDK and should be used
// in your Windows application via an official binary distribution.
// Further information: https://github.com/microsoft/MIDI/
// ============================================================================


// NOTE: This is likely to change. We're working on the correct buffers to speak to the service
// and API. That buffer also deals with timestamps and more. Intent is to provide UMP types
// for folks who wish to use them, and direct access to buffers of MIDI words for those who
// prefer that approach.

// really don't like this implementation. At a minimum, need to see if there's
// a way to allow for lightweight structs (despite them being value types). 
// WinRT generally doesn't support that. This may be another case of a custom
// COM interface to the classes which need to use the Ump type as a void *

import "MidiMessageTypeEnum.idl";

namespace Microsoft.Devices.Midi2
{
    // TODO: Consider if this should just be a simple struct, and leave 
    // the rest of the properties to the strongly typed classes. Optimize
    // for performance and memory here.
    

    [default_interface]
    unsealed runtimeclass MidiUmp
    {
        MidiUmp();

        // revisit this? Vector? Few discrete words?
        UInt32[] Words{ get; };
        UInt8 WordCount{ get; };

        // TODO: Need to ensure unknown message types can still work for prototyping etc.
        MidiMessageType MessageType { get; set; };

    }
}