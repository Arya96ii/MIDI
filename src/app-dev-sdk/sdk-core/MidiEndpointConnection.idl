// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App SDK and should be used
// in your Windows application via an official binary distribution.
// Further information: https://github.com/microsoft/MIDI/
// ============================================================================

// This is the moral equivalent of a "port" in MIDI 1.0. MIDI 2.0 UMP Endpoints are
// almost always bidirectional. This is the main entity that applications will use
// after creating a session

import "MidiEndpointInformation.idl";
import "MidiFunctionBlock.idl";
import "MidiEndpointDataFormatEnum.idl";
import "UmpWithTimestamp.idl";
import "MidiMessagesReceivedEvent.idl";

namespace Microsoft.Devices.Midi2
{
    [default_interface]
    runtimeclass MidiEndpointConnection
    {
        MidiEndpointConnection();

        // Get the device selector for all compatible devices
        static String GetDeviceSelector();
    
        // device selector for a device which implements a specific MIDI transport/protocol
        static String GetDeviceSelector(MidiEndpointDataFormat midiEndpointDataFormat);

        // Id from Windows. This can be used to retrieve the MidiDeviceInformation object with the PnP properties
        String DeviceId{ get; };

        // TODO: the other types of names (user-provided, device-provided, etc.)
        
        Boolean EndpointInformationValid{ get; };               // needed because WinRT doesn't allow null types
        MidiEndpointInformation EndpointInformation{ get; };    // information from Endpoint Info request. Not valid until EndpointInformation requested and received.

        // Blocks which tell us how to treat the groups
        IObservableVector<MidiFunctionBlock>FunctionBlocks { get; };  // these are discovered in-protocol. They can change within the rules in the spec

        // Messages received event only if the centralized message receive is not used
        event Windows.Foundation.EventHandler<MidiMessagesReceivedEventArgs> MessagesReceived;


        // call this if you have your own worker thread. It's a long-running operation
        void RequestEndpointInformationAndFunctions(Boolean forceRefresh);

        // call this version if you do not use your own worker thread. It's a long-running operation
        Windows.Foundation.IAsyncAction RequestEndpointInformationAndFunctionsAsync(Boolean forceRefresh);




        // Send a single strongly-typed UMP with a timestamp
        //void SendUmp(UInt64 timestamp, Microsoft.Devices.Midi2.Ump ump);
        void SendUmp(Microsoft.Devices.Midi2.UmpWithTimestamp ump);

        // send multiple strongly-typed UMPs
        //void SendMultipleUmps(UInt64 timestamp, IVector<Ump> umps);
        void SendMultipleUmps(IVector<UmpWithTimestamp> umps);

        // Send a vector of MIDI words. The full set of words need to result in complete UMPs.
        // This will require the code to read the words and inser the the timestamp into the stream
        // in between each complete UMP
        void SendMultipleUmpsAsWords(UInt64 timestamp, IVector<UInt32> midiWords);


        // May need to implement a separate COM interface for just pointer passing from C++ and similar, as an optimization
        // That could be done inside a buffer type so the buffer can point to pre-allocated app memory
        // More info: https://devblogs.microsoft.com/oldnewthing/20200424-00/?p=103702
        // And our winmm impl https://learn.microsoft.com/en-us/windows/win32/api/mmeapi/nf-mmeapi-midioutlongmsg
        // https://learn.microsoft.com/en-us/previous-versions/dd798449(v=vs.85)


    }
}