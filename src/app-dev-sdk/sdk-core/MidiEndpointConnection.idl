// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App SDK and should be used
// in your Windows application via an official binary distribution.
// Further information: https://github.com/microsoft/MIDI/
// ============================================================================

// This is the moral equivalent of a "port" in MIDI 1.0. MIDI 2.0 UMP Endpoints are
// almost always bidirectional. This is the main entity that applications will use
// after creating a session

import "MidiEndpointInformation.idl";
import "MidiFunctionBlock.idl";
import "MidiEndpointDataFormatEnum.idl";
import "MidiUmpWithTimestamp.idl";
import "MidiMessagesReceivedEventArgs.idl";
import "MidiMessageReader.idl";
import "MidiMessageWriter.idl";

namespace Microsoft.Devices.Midi2
{
    [default_interface]
    runtimeclass MidiEndpointConnection
    {
        //MidiEndpointConnection();

        // Enumeration Assistance ==============================================================================================

        // Get the device selector for all compatible devices
        static String GetDeviceSelector();
    
        // device selector for a device which implements a specific MIDI transport/protocol
        static String GetDeviceSelector(MidiEndpointDataFormat midiEndpointDataFormat);

        // Id from Windows. This can be used to retrieve the MidiDeviceInformation object with the PnP properties
        String DeviceId{ get; };




        // In-protocol Metadata ================================================================================================

        Boolean EndpointInformationValid{ get; };               // needed because WinRT doesn't allow null types
        MidiEndpointInformation EndpointInformation{ get; };    // information from Endpoint Info request. Not valid until EndpointInformation requested and received.

        // Blocks which tell us how to treat the groups
        IVectorView<MidiFunctionBlock> FunctionBlocks { get; };  // these are discovered in-protocol. They can change within the rules in the spec


        // call this if you have your own worker thread. It's a long-running operation
        void RequestEndpointInformationAndFunctions(Boolean forceRefresh);

        // call this version if you do not use your own worker thread. It's a long-running operation
        Windows.Foundation.IAsyncAction RequestEndpointInformationAndFunctionsAsync(Boolean forceRefresh);




        // Message I/O =========================================================================================================

        // Use this to obtain the message reader (one per Endpoint Connection) for processing incoming messages
        // repeat calls to this will return the same instance
        MidiMessageReader GetMessageReader();

        // Use this to obtain the message writer (one per Endpoint Connection) for sending messages
        // repeat calls to this will return the same instance
        MidiMessageWriter GetMessageWriter();


        // notification that there are new messages received. Optional.
        event Windows.Foundation.EventHandler<MidiMessagesReceivedEventArgs> MessagesReceived;

    }
}