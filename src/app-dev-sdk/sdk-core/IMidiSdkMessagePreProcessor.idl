// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App SDK and should be used
// in your Windows application via an official binary distribution.
// Further information: https://github.com/microsoft/MIDI/
// ============================================================================

namespace Microsoft.Devices.Midi2
{
    [
        uuid(1526409d-8842-4714-abc8-371cfb5c32a2),
        version(1.0),
    ]
    interface IMidiSdkMessagePreProcessor
    {
        // TODO: This is the interface which will allow implementation of message processors.
        // Examples:
        //  Stream message (Endpoint, function block, other future messages) parsing
        //  MIDI CI processing


        void foo;

        // The trick here will be to be able to pull out messages from the stream without
        // having a big impact on performance (because now we're having to copy and move, 
        // or flag/nullify messages, which would require room in the message header to do 
        // it, or a separate array of indexes). Can't just turn them into NOOP messages 
        // because the messages removed can be any of the UMP sizes, and we'd need the
        // timestamp entries to still line up. Also Don't want to use magic numbers in the
        // UMP themselves because that will come back to haunt us in the future. 
        // 
        // Or, it may be, that because of how the circular buffer works, we're better off
        // keeping our own copy of the data anyway, which would make this moot. But this 
        // Really needs to be tested for memory usage and performance in some of the 
        // more extreme MIDI 2.0 use cases.
        // 
        // This is all under consideration and no matter what solution, would be optional.

    }
}