// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App SDK and should be used
// in your Windows application via an official binary distribution.
// Further information: https://github.com/microsoft/MIDI/
// ============================================================================

import "MidiUmp32.idl";
import "MidiUmp64.idl";
import "MidiUmp96.idl";
import "MidiUmp128.idl";

import "MidiMessageTypeEnum.idl";

// really don't like this implementation. At a minimum, need to see if there's
// a way to allow for lightweight structs (despite them being value types). 
// WinRT generally doesn't support that. This may be another case of a custom
// COM interface to the classes which need to use the Ump type as a void *

namespace Microsoft.Devices.Midi2
{
    // TODO: Timestamps will come in for each message, and go out with each message. Include them 
    // in the base Ump class, or create a wrapper class? A wrapper class *could* also include a 
    // JR timestamp if we decide to just pass them through

    [default_interface]
    runtimeclass MidiUmpWithTimestamp
    {
        MidiUmpWithTimestamp();

        UInt64 Timestamp{ get; set; };

        UInt32[] Words{ get; };
        UInt8 WordCount{ get; };

        MidiMessageType MessageType{ get; set; };

        // convert from the basic structure
        static MidiUmpWithTimestamp FromUmp32(MidiUmp32 ump);
        static MidiUmpWithTimestamp FromUmp64(MidiUmp64 ump);
        static MidiUmpWithTimestamp FromUmp96(MidiUmp96 ump);
        static MidiUmpWithTimestamp FromUmp128(MidiUmp128 ump);

    }
}