// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App SDK and should be used
// in your Windows application via an official binary distribution.
// Further information: https://github.com/microsoft/MIDI/
// ============================================================================

// class that wraps the DeviceInformation class and provides better access to properties
// This is the PnP information provided by drivers and transport plugins, not the 
// in-protocol information. We may revisit that in the future, but having transports
// do function block and endpoint queries, and in a reasonable time, is a heavy lift

import "MidiEndpoint.idl";

import "MidiGroupTerminalBlock.idl";
import "MidiEndpointNativeDataFormatType.idl";


namespace Microsoft.Devices.Midi2
{
    [default_interface]
    runtimeclass MidiDeviceInformation
    {
        static MidiDeviceInformation CreateFromId(String deviceId);

        // TODO: This may be dropped because caller needs to know to request the extended property set
        static MidiDeviceInformation FromDeviceInformation(Windows.Devices.Enumeration.DeviceInformation deviceInformation);

        static Windows.Devices.Enumeration.DeviceWatcher CreateWatcher();
        static Windows.Devices.Enumeration.DeviceWatcher CreateWatcher(MidiEndpointNativeDataFormatType midiDeviceType);

        // device Id as provided by Windows
        String Id{ get; };

        // the name the user wants us to use here. Source may be entry, device, etc.
        String Name{ get; };

        // Description of the endpoint, as provided by the user
        String Description{ get; };

        // if a unique identifier was provided, it is here
        String HasPersistentUniqueIdentifier{ get; };
        String UniqueIdentifier{ get; };

        // tells us if this is a converted MIDI 1.0 byte stream port, or native UMP endpoint
        MidiEndpointNativeDataFormatType EndpointType{ get; };

        Boolean HasGroupTerminalBlocks{ get; };
        IVector<MidiGroupTerminalBlock>GroupTerminalBlocks{ get; };  // these are USB-specific, created at enumeration time, and do not change

        Windows.Devices.Enumeration.DeviceThumbnail DeviceThumbnail{ get; };

        // maps to underlying DeviceInformation properties
 //       IMapView<String, IInspectable const&> Properties() { get; };

        // original DeviceInformation object
        //Windows.Devices.Enumeration.DeviceInformation DeviceInformation{ get; };

        // TODO:
        // Device names
        // Manufacturer information
        // Driver information if present
        // Transport information
        // Other device metadata
        // Standard transport icon

    }
}