import "Ump32.idl";
import "Ump64.idl";
import "Ump96.idl";
import "Ump128.idl";
import "MidiStream.idl";


namespace Windows.Devices.Midi
{

    // Base class for all MIDI messages
    // this needs to be an abstract class

    runtimeclass MidiMessage
    {
        UInt8 MessageType { get; };
        UInt8 Status{ get; };
        UInt8 Group{ get; };

        // these static methods return a strongly-typed MidiMessage when given a UMP
        [default_overload]
        static MidiMessage FromUmp(Ump32 ump);
        static MidiMessage FromUmp(Ump64 ump);
        static MidiMessage FromUmp(Ump96 ump);
        static MidiMessage FromUmp(Ump128 ump);
    };

    // this needs to be an abstract class
    runtimeclass MidiUtilityMessage : MidiMessage
    {

    };




    runtimeclass MidiNoopMessage : MidiUtilityMessage
    {
        // Message does nothing, but is valid
    };

    runtimeclass MidiJitterReductionClockMessage : MidiUtilityMessage
    {
        UInt16 SenderClockTime { get; };
    };

    runtimeclass MidiJitterReductionTimestampkMessage : MidiUtilityMessage
    {
        UInt16 SenderClockTimestamp { get; };
    };




    runtimeclass Midi1ChannelVoiceMessage : MidiMessage
    {
        UInt8 Channel { get; };
    };

    runtimeclass Midi2ChannelVoiceMessage : MidiMessage
    {
        UInt8 Channel { get; };
    };



    runtimeclass Midi1NoteOffMessage : Midi1ChannelVoiceMessage
    {
        UInt8 NoteNumber{ get; };
        UInt8 Velocity{ get; };
    };

    runtimeclass Midi1NoteOnMessage : Midi1ChannelVoiceMessage
    {
        UInt8 NoteNumber{ get; };
        UInt8 Velocity{ get; };
    };

    runtimeclass Midi1PolyPressureMessage : Midi1ChannelVoiceMessage
    {
        UInt8 NoteNumber{ get; };
        UInt8 Data{ get; };
    };

    runtimeclass Midi1ControlChangeMessage : Midi1ChannelVoiceMessage
    {
        UInt8 Index{ get; };
        UInt8 Data{ get; };
    };

    runtimeclass Midi1ProgramChangeMessage : Midi1ChannelVoiceMessage
    {
        UInt8 Program{ get; };
    };

    runtimeclass Midi1ChannelPressureMessage : Midi1ChannelVoiceMessage
    {
        UInt8 Data{ get; };
    };

    runtimeclass Midi1PitchBendMessage : Midi1ChannelVoiceMessage
    {
        UInt8 DataLsb{ get; };
        UInt8 DataMsb{ get; };

        // does the bit shifting for you
        UInt16 CombinedBendData{ get; }
    };

    runtimeclass Midi2NoteOffMessage : Midi2ChannelVoiceMessage
    {
        UInt8 NoteNumber{ get; };
        UInt8 AttributeType{ get; };
        UInt16 Velocity{ get; };
        UInt16 AttributeData{ get; };
    };

    runtimeclass Midi2PolyPressureMessage : Midi2ChannelVoiceMessage
    {
        UInt8 NoteNumber{ get; };
        UInt32 Data{ get; };
    };

    runtimeclass Midi2RegisteredPerNoteControllerMessage : Midi2ChannelVoiceMessage
    {
        UInt8 NoteNumber{ get; };
        UInt8 Index{ get; };
        UInt32 Data{ get; };
    };

    runtimeclass Midi2AssignablePerNoteControllerMessage : Midi2ChannelVoiceMessage
    {
        UInt8 NoteNumber{ get; };
        UInt8 Index{ get; };
        UInt32 Data{ get; };
    };

    runtimeclass Midi2PerNoteManagementMessage : Midi2ChannelVoiceMessage
    {
        UInt8 NoteNumber{ get; };
        Boolean DetachPerNoteControllers{ get; };
        Boolean ResetPerNoteControllers{ get; };
    };

    runtimeclass Midi2ControlChangeMessage : Midi2ChannelVoiceMessage
    {
        UInt8 Index{ get; };
        UInt32 Data{ get; };
    };

    runtimeclass Midi2RegisteredControllerMessage : Midi2ChannelVoiceMessage
    {
        UInt8 Bank{ get; };
        UInt8 Index{ get; };
        UInt32 Data{ get; };
    };

    runtimeclass Midi2AssignableControllerMessage : Midi2ChannelVoiceMessage
    {
        UInt8 Bank{ get; };
        UInt8 Index{ get; };
        UInt32 Data{ get; };
    };

    runtimeclass Midi2RelativeRegisteredControllerMessage : Midi2ChannelVoiceMessage
    {
        UInt8 Bank{ get; };
        UInt8 Index{ get; };
        UInt32 Data{ get; };
    };

    runtimeclass Midi2RelativeAssignableControllerMessage : Midi2ChannelVoiceMessage
    {
        UInt8 Bank{ get; };
        UInt8 Index{ get; };
        UInt32 Data{ get; };
    };

    runtimeclass Midi2ProgramChangeMessage : Midi2ChannelVoiceMessage
    {
        Boolean BankValid{ get; };
        
        UInt8 Program{ get; };

        UInt8 BankMsb{ get; };
        UInt8 BankLsb{ get; };

        // does the bit shifting for you
        UInt16 CombinedBank{ get; }
    };

    runtimeclass Midi2ChannelPressureMessage: Midi2ChannelVoiceMessage
    {
        UInt32 Data{ get; };
    };

    runtimeclass Midi2PitchBendMessage : Midi2ChannelVoiceMessage
    {
        UInt32 Data{ get; };
    };

    runtimeclass Midi2PerNotePitchBendMessage : Midi2ChannelVoiceMessage
    {
        UInt8 NoteNumber{ get; };
        UInt32 Data{ get; };
    };


    // TODO: Need sysex, system common, system realtime, mixed data set, and other types of messages


}