import "MidiStream.idl";


namespace Windows.Devices.Midi
{
    // No inheritance allowed here in WinRT, so this has both input and output and properties which aren't 
    // always usable. Could refactor this a bit, but it gets super messy when used from C++ apps if you do

    interface IMidiEndpoint
    {
        String Id{ get; };                          // GUID for this device
        String Name{ get; set; };                   // User-supplied name. Defaults to device-supplied name
        String DeviceSuppliedName{ get; };          // Name of the endpoint as supplied by the device itself
        String Serial{ get; };                      // For devices which support this the unique HW ID
        String IconFileName{ get; };                // File name of the icon for this endpoint. Not full path, just file name.
        String Description{ get; };                 // Description of the device. Supplied by user.

        // TODO: Add a type differentiator to indicate if this is OneWay-Output, OneWay-Input, or Bidirectional
    };

    // TODO: Breaking these out seems a bit messy at first. 
    // Consider if the "requires" approach is the right way here
    // Try out with some implementations first.

    interface IMidiOutputEndpoint requires IMidiEndpoint
    {
        MidiStream OutputStream{ get; };                    // where messages are sent to

    };

    interface IMidiInputEndpoint requires IMidiEndpoint
    {
        MidiStream InputStream{ get; };                     // where messages are coming from
    };

    // TODO: Need to have protocol by group
    // 3.1.2 Selecting a MIDI Protocol for a Group
    // MIDI - CI Protocol Negotiation[MMA02] is the MIDI standard method for discovering or selecting MIDI
    // Protocols on a per - Group basis.Some devices, interfaces, APIs, or transports might have additional means 
    // for discovering or selecting protocols on a per Group basis to fit the needs of a particular MIDI system.
    interface IMidiBidirectionalEndpoint requires IMidiEndpoint
    {
        Boolean ProtocolNegotiationSupported{ get; };       // can be overridden by user in configuration settings for this endpoint
        Boolean ProfileConfigurationSupported{ get; };      // will be used by apps. Set by discovery/capability inquiry or overridden by user.
        Boolean PropertyExchangeSupported{ get; };          // will be used by apps. Set by discovery/capability inquiry or overridden by user.

        UInt8 ProtocolType{ get; };                         // 1 or 2 See MIDI CI protocol negotiation spec
        UInt8 ProtocolVersion{ get; };                      // 0x00 in all cases so far. See MIDI CI protocol negotiation spec

        UInt32 SizeOfPacket{ get; };                        // see protocol negotiation spec. This is a protocol extension
        Boolean UseJitterReductionTimeStamps{ get; };       // ditto


        MidiStream InputStream{ get; };                     // where messages are coming from
        MidiStream OutputStream{ get; };                    // where messages are sent to
    };

    // Maybe the endpoint contains an vector of protocol information by group rather
    // than hold that information at the endpoint level

    // Rethink the streams. All send/receive will happen at session level
    // But this needs to support that session-level sending through a public interface
}