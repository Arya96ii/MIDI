import "IMidiDevice.idl";
import "IMidiEndpoint.idl";

import "IMidiDeviceOpenSettings.idl";
import "IMidiDeviceCreateSettings.idl";

import "IMidiEndpointOpenSettings.idl";
import "IMidiEndpointCreateSettings.idl";

import "MidiSessionCreateSettings.idl";

import "MidiSessionLogLevel.idl";

import "MidiMessageReceivedEventArgs.idl";

namespace Windows.Devices.Midi
{
    runtimeclass MidiSession
    {
        // properties ------------------------------------------

        String Id{ get; };                                  // Generated GUID for this session
        String Name{ get; set; };                           // Name provided by the app opening the session
        String ProcessName{ get; };                         // name of the Windows process
        UInt32 ProcessId{ get; };                           // same as ProcessDiagnosticInfo.ProcessId property
        Windows.Foundation.DateTime CreatedTime{ get; };    // Date/time of when this session was created
        MidiSessionLogLevel LogLevel{ get; set; };          // Log level for the session

        IVector<IMidiDevice> Devices{ get; };               // vector containing all active devices. Auto-populated when session created

        // Lifetime functions ----------------------------------

        // Create: Creates a new session object, and registers the ID and key info
        // with the server. Populates the session with all available MIDI devices.
        static MidiSession Create(String name, MidiSessionCreateSettings settings);
        static MidiSession Create(String name);
        void Close();


        // Device and endpoint lifetime ------------------------
       
        IMidiDevice CreateDevice(IMidiDeviceCreateSettings settings);    // only for devices and endpoints which can be added at runtime, like virtual
        IMidiDevice DestroyDevice(String deviceId);                  // only for devices and endpoints which can be added at runtime, like virtual
        IMidiEndpoint OpenDevice(String deviceId, IMidiDeviceOpenSettings settings);    // preps device, populates its endpoints
        void CloseDevice(String deviceId, String endpointId);

        IMidiEndpoint CreateEndpoint(String deviceId, IMidiEndpointCreateSettings settings); // only for devices and endpoints which can be added at runtime, like virtual
        IMidiEndpoint DestroyEndpoint(String deviceId, String endpointId);           // only for devices and endpoints which can be added at runtime, like virtual
        IMidiEndpoint OpenEndpoint(String deviceId, String endpointId, IMidiEndpointOpenSettings settings);
        void CloseEndpoint(String deviceId, String endpointId);


        // TODO: Device Add/Remove/Change notification events
        // TODO: Endpoint Add/Remove/Change notification events

        IVector<IMidiEndpoint> GetAllEndpoints();       // helper function to get a flat list of endpoints

        // TODO: CI-triggered change callbacks?


        // TODO: message receive callbacks, message send functions, CI functions, etc.





        // utility functions -----------------------------------

        void Panic();                                       // panic all devices/endpoints
        void Panic(String deviceId);                        // panic single device and its endpoints
        void Panic(String deviceId, String endpointId);     // panic single endpoint


    }
}
