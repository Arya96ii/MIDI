// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App API and should be used
// in your Windows application via an official binary distribution.
// Further information: https://github.com/microsoft/MIDI/
// ============================================================================

#include "midl_defines.h"
MIDI_IDL_IMPORT

import "MidiGroupTerminalBlock.idl";
import "MidiProtocolEnum.idl";
import "MidiEndpointNativeDataFormatEnum.idl";
import "MidiEndpointDevicePurposeEnum.idl";
//import "MidiEndpointDeviceWatcher.idl";
import "MidiFunctionBlock.idl";

namespace Windows.Devices.Midi2
{
    [MIDI_API_CONTRACT(1)]
    [default_interface]
    runtimeclass MidiEndpointDeviceInformation
    {
        static MidiEndpointDeviceInformation CreateFromId(String id);
        //static MidiEndpointDeviceWatcher CreateWatcher();
        static IVectorView<MidiEndpointDeviceInformation> FindAll(Boolean includeDiagnosticsEndpoints);

        static String DiagnosticsLoopbackAEndpointId{ get; };
        static String DiagnosticsLoopbackBEndpointId{ get; };
        //static String DiagnosticsPingEndpointId{ get; };      // don't expose in IDL

        static String EndpointInterfaceClass{ get; };

        static IVectorView<String> GetAdditionalPropertiesList();

        String Id { get; };
        
        Windows.Devices.Enumeration.DeviceInformation DeviceInformation{ get; };

        Windows.Devices.Enumeration.DeviceInformation GetParentDeviceInformation();
        Windows.Devices.Enumeration.DeviceInformation GetContainerInformation();


        //String ParentDeviceId{ get; };
        Guid ContainerId{ get; };
        String DeviceInstanceId{ get; };

        //String ParentDeviceInstanceId{ get; };

        // We surface all the names here, but use a hierarchy to decide which Name we show as the Name property

        String Name{ get; };                        // user supplied name, if provided (defaults to device name otherwise)
        String TransportSuppliedName{ get; };       // device/transport supplied name, from pnp
        String EndpointSuppliedName{ get; };        // name supplied by the in-protocol endpoint information, if available
        String UserSuppliedName{ get; };            // name supplied by the user, if available


        String ProductInstanceId{ get; };           // 


        UInt8 SpecificationVersionMajor{ get; };
        UInt8 SpecificationVersionMinor{ get; };

        Boolean HasStaticFunctionBlocks{ get; };

        Boolean SupportsMidi10Protocol{ get; };
        Boolean SupportsMidi20Protocol{ get; };
        MidiProtocol ConfiguredProtocol{ get; };    // MIDI 1.0 or MIDI 2.0 for this endpoint

        Boolean SupportsReceivingJRTimestamps{ get; };
        Boolean SupportsSendingJRTimestamps{ get; };

        // TODO: MIDI Device Id (sysex stuff)

        // transport type
        String TransportId{ get; };
        String TransportMnemonic{ get; };

        // unique Id like iSerialNumber
        String UniqueIdentifier{ get; };

        // whether or not this supports multi-client use
        Boolean SupportsMultiClient{ get; };


        // whether or not this is an upgrade MIDI 1.0 device
        MidiEndpointNativeDataFormat NativeDataFormat{ get; };

        // group terminal blocks and function blocks
        IVectorView<MidiGroupTerminalBlock> GroupTerminalBlocks{ get; };
        IVectorView<MidiFunctionBlock> FunctionBlocks{ get; };

        // If this is a diagnostic endpoint
        MidiEndpointDevicePurpose EndpointPurpose{ get; };



        // The settings app allows the user to add some metadata, like a description
        String Description{ get; };

        // png icon supplied by the user
        String LargeImagePath{ get; };
        String SmallImagePath{ get; };


        
        // constructor to create from the watcher events

        // constructor to create from DeviceInformation


    }
}