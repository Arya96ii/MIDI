// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App API and should be used
// in your Windows application via an official binary distribution.
// Further information: https://github.com/microsoft/MIDI/
// ============================================================================

#include "midl_defines.h"
MIDI_IDL_IMPORT

import "MidiGroupTerminalBlock.idl";
import "MidiEndpointTypeEnum.idl";
import "MidiProtocolEnum.idl";
import "MidiEndpointNativeDataFormatEnum.idl";
import "MidiEndpointDevicePurposeEnum.idl";
import "MidiEndpointDeviceWatcher.idl";
import "MidiFunctionBlock.idl";
import "MidiEndpointInformation.idl";

namespace Windows.Devices.Midi2
{
    [MIDI_API_CONTRACT(1)]
    [default_interface]
    runtimeclass MidiEndpointDeviceInformation
    {
        static MidiEndpointDeviceInformation CreateFromId(String id);

//        static MidiEndpointDeviceWatcher CreateWatcher();

        static String UniversalMidiPacketBidirectionalInterfaceClassId{ get; };

        static IVectorView<String> GetAdditionalPropertiesList();

        String Id { get; };
        
        Windows.Devices.Enumeration.DeviceInformation DeviceInformation{ get; };


        // manufacturer, model, etc. come from the parent device, and so are not duplicated here.
        String ParentDeviceId{ get; };

        String ContainerId{ get; };

        // user supplied name, if provided (defaults to device name otherwise)
        String Name{ get; };

        // device/transport supplied name, from pnp
        String TransportSuppliedName{ get; };

        // transport type
        String TransportId{ get; };

        // unique Id like iSerialNumber
        Boolean HasUniqueIdentifier{ get; };
        String UniqueIdentifier{ get; };

        // whether or not this supports multi-client use
        Boolean SupportsMultiClient{ get; };

        // ump endpoint type (int/out/bidi)
        MidiEndpointType EndpointType{ get; };

        // whether or not this is an upgrade MIDI 1.0 device
        MidiEndpointNativeDataFormat NativeDataFormat{ get; };

        // group terminal blocks and function blocks
        IVectorView<MidiGroupTerminalBlock> GroupTerminalBlocks{ get; };
        IVectorView<MidiFunctionBlock> FunctionBlocks{ get; };

        // Endpoint metadata 
        MidiEndpointInformation EndpointInformation{ get; };

        // If this is a diagnostic endpoint
        MidiEndpointDevicePurpose EndpointPurpose{ get; };


        // property bag of all other properties
        // TODO


        // The settings app allows the user to add some metadata, like a description
        String Description{ get; };

        // png icon supplied by the user
        // TODO
        String ImagePath{ get; };


        
        // constructor to create from the watcher events

        // constructor to create from DeviceInformation


    }
}