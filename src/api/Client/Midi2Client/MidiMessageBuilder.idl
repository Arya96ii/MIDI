// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App API and should be used
// in your Windows application via an official binary distribution.
// Further information: https://github.com/microsoft/MIDI/
// ============================================================================

#include "midl_defines.h"
MIDI_IDL_IMPORT

// this has the most basic message building as required in the API. For more
// advanced message building, including specific messages, see the SDK.

import "IMidiUmp.idl";
import "MidiUmp32.idl";
import "MidiUmp64.idl";
import "MidiUmp96.idl";
import "MidiUmp128.idl";
//import "MidiGroup.idl";

import "MidiSysEx8StatusEnum.idl";

namespace Windows.Devices.Midi2
{
    [MIDI_API_CONTRACT(1)]
    runtimeclass MidiMessageBuilder
    {
        // parameters are named, where applicable, for the fields as defined in the spec.

        // Type 0 utility messages
        static MidiUmp32 BuildUtilityMessage(
            MIDI_TIMESTAMP timestamp, 
            UInt8 reserved, 
            UInt8 status, 
            UInt32 dataOrReserved);

        // Type 1 System common and System Real-time messages
        static MidiUmp32 BuildSystemMessage(
            MIDI_TIMESTAMP timestamp,
            UInt8 groupIndex,
            UInt8 status, 
            UInt8 midi1Byte2, 
            UInt8 midi1Byte3);

        // Type 2 MIDI 1.0 Channel Voice messages
        static MidiUmp32 BuildMidi1ChannelVoiceMessage(
            MIDI_TIMESTAMP timestamp,
            UInt8 groupIndex,
            UInt8 status, 
            UInt8 channel, 
            UInt8 byte3, 
            UInt8 byte4);

        // Type 3 7-bit System Exclusive. SDK has more comprehensive SysEx management as these typically span multiple messages
        [default_overload]
        static MidiUmp64 BuildSysEx7Message(
            MIDI_TIMESTAMP timestamp,
            UInt8 groupIndex,
            UInt8 status, 
            UInt8 numberOfBytes, 
            UInt8 dataByte0, 
            UInt8 dataByte1, 
            UInt8 dataByte2, 
            UInt8 dataByte3, 
            UInt8 dataByte4, 
            UInt8 dataByte5);

        static MidiUmp64 BuildSysEx7MessageFromArray(
            MIDI_TIMESTAMP timestamp,
            UInt8 groupIndex,
            UInt8 status, 
            UInt8 numberOfBytes, 
            UInt8[] dataBytes,
            UInt32 arrayStartIndex);

        static MidiUmp64 BuildSysEx7MessageFromBuffer(
            MIDI_TIMESTAMP timestamp,
            UInt8 groupIndex,
            UInt8 status, 
            UInt8 numberOfBytes, 
            Windows.Foundation.IMemoryBuffer buffer, 
            UInt32 byteOffsetInBuffer);

        // Type 4 MIDI 2.0 Channel Voice message
        static MidiUmp64 BuildMidi2ChannelVoiceMessage(
            MIDI_TIMESTAMP timestamp,
            UInt8 groupIndex,
            UInt8 status, 
            UInt8 channel, 
            UInt16 index, 
            UInt32 data);

        // Type 5 8-bit System Exclusive. SDK has more comprehensive SysEx management as these typically span multiple messages
        static MidiUmp128 BuildSysEx8Message(
            MIDI_TIMESTAMP timestamp,
            UInt8 groupIndex,
            MidiSysEx8Status status, 
            UInt8 numberOfValidDataBytesThisMessage, 
            UInt8 streamId, 
            UInt8 dataByte00, 
            UInt8 dataByte01, 
            UInt8 dataByte02, 
            UInt8 dataByte03, 
            UInt8 dataByte04, 
            UInt8 dataByte05, 
            UInt8 dataByte06, 
            UInt8 dataByte07, 
            UInt8 dataByte08, 
            UInt8 dataByte09, 
            UInt8 dataByte10, 
            UInt8 dataByte11, 
            UInt8 dataByte12);

        static MidiUmp128 BuildSysEx8MessageFromArray(
            MIDI_TIMESTAMP timestamp,
            UInt8 groupIndex,
            MidiSysEx8Status status, 
            UInt8 numberOfValidDataBytesThisMessage, 
            UInt8 streamId, 
            UInt8[] dataBytes,
            UInt32 arrayStartIndex);

        static MidiUmp128 BuildSysEx8MessageFromBuffer(
            MIDI_TIMESTAMP timestamp,
            UInt8 groupIndex,
            MidiSysEx8Status status, 
            UInt8 numberOfValidDataBytesThisMessage, 
            Windows.Foundation.IMemoryBuffer buffer, 
            UInt32 byteOffsetInBuffer);

        // Type 5 Mixed Data Set Messages

        // Chunk header. Status = 0x8
        static MidiUmp128 BuildMixedDataSetChunkHeaderMessage(
            MIDI_TIMESTAMP timestamp,
            UInt8 groupIndex,
            UInt8 mdsId, 
            UInt16 numberValidDataBytesInThisChunk, 
            UInt16 numberChunksInMixedDataSet, 
            UInt16 numberOfThisChunk, 
            UInt16 manufacturerId, 
            UInt16 deviceId, 
            UInt16 subId1, 
            UInt16 subId2);

        // Chunk payload. Status = 0x9
        static MidiUmp128 BuildMixedDataSetChunkDataMessage(
            MIDI_TIMESTAMP timestamp,
            UInt8 groupIndex,
            UInt8 mdsId, 
            UInt8 dataByte00, 
            UInt8 dataByte01, 
            UInt8 dataByte02, 
            UInt8 dataByte03, 
            UInt8 dataByte04, 
            UInt8 dataByte05, 
            UInt8 dataByte06, 
            UInt8 dataByte07, 
            UInt8 dataByte08, 
            UInt8 dataByte09, 
            UInt8 dataByte10, 
            UInt8 dataByte11, 
            UInt8 dataByte12, 
            UInt8 dataByte13);

        static MidiUmp128 BuildMixedDataSetChunkDataMessageFromArray(
            MIDI_TIMESTAMP timestamp,
            UInt8 groupIndex,
            UInt8 mdsId, 
            UInt8 numberOfValidDataBytesThisMessage, 
            UInt8[] dataBytes,
            UInt32 arrayStartIndex);

        static MidiUmp128 BuildMixedDataSetChunkDataMessageFromBuffer(
            MIDI_TIMESTAMP timestamp,
            UInt8 groupIndex,
            UInt8 mdsId, 
            UInt8 numberOfValidDataBytesThisMessage, 
            Windows.Foundation.IMemoryBuffer buffer, 
            UInt32 byteOffsetInBuffer);

        // Type D Flex Data message
        static MidiUmp128 BuildFlexDataMessage(
            MIDI_TIMESTAMP timestamp,
            UInt8 groupIndex,
            UInt8 form, 
            UInt8 address, 
            UInt8 channel, 
            UInt8 statusBank, 
            UInt8 status, 
            UInt32 word1Data, 
            UInt32 word2Data, 
            UInt32 word3Data);

        // Type F stream message
        static MidiUmp128 BuildUmpStreamMessage(
            MIDI_TIMESTAMP timestamp,
            UInt8 form,
            UInt16 status, 
            UInt16 word0RemainingData, 
            UInt32 word1Data, 
            UInt32 word2Data, 
            UInt32 word3Data);

    
        // Currently, Type 6, 7, 8, 9, A, B, C, and E messages are reserved. When they are defined
        // we will add a new contract version with additional build functions.

    };
}