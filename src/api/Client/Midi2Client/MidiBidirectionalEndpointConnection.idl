// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App API and should be used
// in your Windows application via an official binary distribution.
// Further information: https://github.com/microsoft/MIDI/
// ============================================================================

// This is the moral equivalent of a "port" in MIDI 1.0. MIDI 2.0 UMP Endpoints are
// almost always bidirectional. This is the main entity that applications will use
// after creating a session

#include "midl_defines.h"
MIDI_IDL_IMPORT


import "IMidiInputConnection.idl";
import "IMidiOutputConnection.idl";
import "IMidiMessageReceivedEventSource.idl";
import "IMidiEndpointConnection.idl";

import "MidiFunctionBlock.idl";
import "MidiFunctionBlocksUpdatedEventARgs.idl";

import "MidiEndpointInformation.idl";
import "MidiEndpointInformationUpdatedEventArgs.idl";

import "MidiStreamConfigurationRequestedSettings.idl";

namespace Windows.Devices.Midi2
{
    [MIDI_API_CONTRACT(1)]
    [default_interface]
    runtimeclass MidiBidirectionalEndpointConnection : Windows.Devices.Midi2.IMidiEndpointConnection,
                                                       Windows.Devices.Midi2.IMidiInputConnection,
                                                       Windows.Devices.Midi2.IMidiMessageReceivedEventSource,
                                                       Windows.Devices.Midi2.IMidiOutputConnection,
                                                       Windows.Foundation.IClosable

    {
        // Get the enumeration device selector for all compatible devices
        static String GetDeviceSelector();

        //Boolean RequestUpdatedFunctionBlocks();
        IVectorView<MidiFunctionBlock> FunctionBlocks{ get; };

        // uncomment this and implement if decided we need it
        //bool RenegotiateStreamConfiguration(MidiStreamConfigurationRequestedSettings settings);


        // callback for when a function block is updated comes in
        event Windows.Foundation.TypedEventHandler<IInspectable, MidiFunctionBlocksUpdatedEventArgs> FunctionBlocksUpdated;


        //Boolean RequestUpdatedEndpointInformation();
        Boolean IsEndpointInformationAvailable{ get; };
        MidiEndpointInformation EndpointInformation{ get; };

        // callback for when a endpoint update comes in
        event Windows.Foundation.TypedEventHandler<IInspectable, MidiEndpointInformationUpdatedEventArgs> EndpointInformationUpdated;


        IVector<IMidiEndpointMessageProcessingPlugin> MessageProcessingPlugins{ get; };

    }


}