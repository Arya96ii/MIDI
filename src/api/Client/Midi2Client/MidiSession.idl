// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App API and should be used
// in your Windows application via an official binary distribution.
// Further information: https://github.com/microsoft/MIDI/
// ============================================================================

#include "midl_defines.h"
MIDI_IDL_IMPORT

import "MidiEndpointConnection.idl";
import "IMidiEndpointDefinedConnectionSettings.idl";
import "MidiSessionSettings.idl";
import "MidiEndpointConnectionOptions.idl";
import "MidiVirtualEndpointDeviceDefinition.idl";


namespace Windows.Devices.Midi2
{
    [MIDI_API_CONTRACT(1)]
    [default_interface]
    runtimeclass MidiSession : Windows.Foundation.IClosable
    {
        Guid Id { get; };
        String Name{ get; };
        MidiSessionSettings Settings{ get; };

        // captures the PID, app name, etc.
        static MidiSession CreateSession(String sessionName);
        static MidiSession CreateSession(String sessionName, MidiSessionSettings settings);

        Boolean IsOpen { get; };

        // Having this list here allows us to be able to close
        // all connections with the session. Also convenient for
        // consuming code to use this table.
        IMapView<Guid, MidiEndpointConnection> Connections{ get; };

        MidiEndpointConnection CreateEndpointConnection(
            String endpointDeviceId
        );

        MidiEndpointConnection CreateEndpointConnection(
            String endpointDeviceId,
            MidiEndpointConnectionOptions options
        );

        MidiEndpointConnection CreateEndpointConnection(
            String endpointDeviceId,
            MidiEndpointConnectionOptions options,
            IMidiEndpointDefinedConnectionSettings settings
        );

        // creating it here helps ensure this is the only possible owner
        // This creates the virtual device, and also adds the appropriate listener
        // to the returned endpoint connection
        MidiEndpointConnection CreateVirtualDeviceAndConnection(
            MidiVirtualEndpointDeviceDefinition deviceDefinition
        );

        // This will close and remove a single endpoint connection instance.
        void DisconnectEndpointConnection(Guid endpointConnectionId);

        // This is associated with the session so we can session-scoped
        // lifetime / info as well as provide the session-level service interface
//        MidiVirtualDeviceManager VirtualDeviceManager{ get; };

        // changes the session name in the service. Needed
        // for cases where the session name is a project name
        // or similar
        Boolean UpdateName(String newName);
    }
}