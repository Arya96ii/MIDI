// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App API and should be used
// in your Windows application via an official binary distribution.
// Further information: https://github.com/microsoft/MIDI/
// ============================================================================

#include "midl_defines.h"
MIDI_IDL_IMPORT

import "IMidiEndpointConnection.idl";
import "MidiOutputEndpointConnection.idl";
import "MidiInputEndpointConnection.idl";
import "MidiBidirectionalEndpointConnection.idl";
import "MidiBidirectionalAggregatedEndpointConnection.idl";

import "IMidiEndpointDefinedConnectionSettings.idl";

import "MidiSessionSettings.idl";

import "MidiBidirectionalEndpointOpenOptions.idl";
import "MidiInputEndpointOpenOptions.idl";
import "MidiOutputEndpointOpenOptions.idl";

import "MidiVirtualDeviceManager.idl";

namespace Windows.Devices.Midi2
{
    [MIDI_API_CONTRACT(1)]
    [default_interface]
    runtimeclass MidiSession : Windows.Foundation.IClosable
    {
        Guid Id { get; };
        String Name{ get; };
        MidiSessionSettings Settings{ get; };

        // captures the PID, app name, etc.
        static MidiSession CreateSession(String sessionName);
        static MidiSession CreateSession(String sessionName, MidiSessionSettings settings);

        Boolean IsOpen { get; };

        // TODO: Change to IMidiEndpointConnection
        IMapView<Guid, IMidiEndpointConnection> Connections{ get; };

        // output-only. Typically for MIDI 1.0 device/block
        MidiOutputEndpointConnection ConnectOutputEndpoint(
            String endpointDeviceId);

        MidiOutputEndpointConnection ConnectOutputEndpoint(
            String endpointDeviceId,
            MidiOutputEndpointOpenOptions options);

        MidiOutputEndpointConnection ConnectOutputEndpoint(
            String endpointDeviceId,
            MidiOutputEndpointOpenOptions options,
            IMidiEndpointDefinedConnectionSettings settings);


        // input-only. Typically for MIDI 1.0 device/block

        MidiInputEndpointConnection ConnectInputEndpoint(
            String endpointDeviceId);

        MidiInputEndpointConnection ConnectInputEndpoint(
            String endpointDeviceId,
            MidiInputEndpointOpenOptions options);

        MidiInputEndpointConnection ConnectInputEndpoint(
            String endpointDeviceId,
            MidiInputEndpointOpenOptions options,
            IMidiEndpointDefinedConnectionSettings settings);


        // connects to a bidirectional endpoint. For MIDI 2.0 devices, this will be the norm. 
        // see notes above.
        MidiBidirectionalEndpointConnection ConnectBidirectionalEndpoint(
            String endpointDeviceId);

        MidiBidirectionalEndpointConnection ConnectBidirectionalEndpoint(
            String endpointDeviceId,
            MidiBidirectionalEndpointOpenOptions options);

        MidiBidirectionalEndpointConnection ConnectBidirectionalEndpoint(
            String endpointDeviceId,
            MidiBidirectionalEndpointOpenOptions options, 
            IMidiEndpointDefinedConnectionSettings settings);


        // Connects to separate input and output endpoints, treating them just like any bidi
        // sending the right discovery messages, etc.
        // The API must be able to open both input and output for this to succeed

        MidiBidirectionalAggregatedEndpointConnection ConnectBidirectionalAggregatedEndpoint(
            String inputEndpointDeviceId,
            String outputEndpointDeviceId);

        MidiBidirectionalAggregatedEndpointConnection ConnectBidirectionalAggregatedEndpoint(
            String inputEndpointDeviceId,
            String outputEndpointDeviceId,
            MidiBidirectionalEndpointOpenOptions options);

        MidiBidirectionalAggregatedEndpointConnection ConnectBidirectionalAggregatedEndpoint(
            String inputEndpointDeviceId,
            String outputEndpointDeviceId,
            MidiBidirectionalEndpointOpenOptions options,
            IMidiEndpointDefinedConnectionSettings settings);


        // note that this takes the connection instance id, not the endpoint id itself
        // This will remove a single endpoint connection instance.

        void DisconnectEndpointConnection(Guid endpointConnectionId);

        // This is associated with the session so we can session-scoped
        // lifetime / info as well as provide the session-level service interface
        MidiVirtualDeviceManager VirtualDeviceManager{ get; };

    }
}