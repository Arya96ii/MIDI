// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App API and should be used
// in your Windows application via an official binary distribution.
// Further information: https://github.com/microsoft/MIDI/
// ============================================================================
// 
// A version of this code will be moved into the service instead of local to the in-proc API

#include "midl_defines.h"
MIDI_IDL_IMPORT

import "MidiEndpointMetadataCacheUpdatedEventArgs.idl";
import "IMidiCacheableMetadata.idl";

namespace Windows.Devices.Midi2
{
    [MIDI_API_CONTRACT(1)]
    [default_interface]
    static runtimeclass MidiEndpointMetadataCache
    {
        // for this local cache implementation, the expiration is only checked when you attempt to get the data
        // or you check to see if the data is present. When the back-end moves to a service, we may handle that
        // with some sort of watcher if the expiration time is critical to track

        [default_overload]
        static void AddOrUpdateData(String endpointDeviceId, String propertyKey, String data, Windows.Foundation.DateTime expirationTime);

        [default_overload]
        static void AddOrUpdateData(String endpointDeviceId, String propertyKey, String data);

        static void AddOrUpdateData(String endpointDeviceId, String propertyKey, IMidiCacheableMetadata data, Windows.Foundation.DateTime expirationTime);
        static void AddOrUpdateData(String endpointDeviceId, String propertyKey, IMidiCacheableMetadata data);


        static void RemoveData(String endpointDeviceId, String propertyKey);
        static String GetData(String endpointDeviceId, String propertyKey);
        static Boolean IsDataPresent(String endpointDeviceId, String propertyKey);

        // TODO: Way to dump a list of all cache entries (without data, just keys, expiration, etc.)

        // TODO: Depending on what could be cached from CI, we may need to also allow group and channel keys, or perhaps MUID keys

        static event Windows.Foundation.TypedEventHandler<IInspectable, MidiEndpointMetadataCacheUpdatedEventArgs> DeviceInformationUpdated;
    }
}

