// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App API and should be used
// in your Windows application via an official binary distribution.
// Further information: https://github.com/microsoft/MIDI/
// ============================================================================


import "unknwn.idl";

typedef enum
{
    MidiFlowIn = 0,
    MidiFlowOut,
    MidiFlowBidirectional
} MidiFlow;

typedef enum
{
	MidiDataFormat_Invalid = 0,
	MidiDataFormat_ByteStream = 0x1,
	MidiDataFormat_UMP = 0x2,
	MidiDataFormat_Any = 0x3
} MidiDataFormat;

[
    object,
    local,
    uuid(A04374D3-4514-44E1-A2F9-7D8B907AEF1F),
    pointer_default(unique)
]
interface IMidiDeviceManagerInterface : IUnknown
{

    HRESULT ActivateVirtualParentDevice(
        [in] ULONG DevPropertyCount,
        [in, annotation("_In_opt_")] PVOID DevProperties,
        [in, annotation("_In_")] PVOID CreateInfo,
        [out, annotation("_Out_writes_opt_z_(CreatedSwDeviceIdCharCount)")] LPWSTR CreatedSwDeviceId,
        [in] ULONG CreatedSwDeviceIdCharCount
    );


    HRESULT ActivateEndpoint(
        [in] LPCWSTR ParentInstanceId,
        [in] BOOL UMPOnly,
        [in] MidiFlow MidiFlow,
        [in] ULONG IntPropertyCount,
        [in] ULONG DevPropertyCount,
        [in, annotation("_In_opt_")] PVOID InterfaceDevProperties,
        [in, annotation("_In_opt_")] PVOID DeviceDevProperties,
        [in, annotation("_In_opt_")] PVOID CreateInfo,
        [out, annotation("_Out_writes_opt_z_(CreatedSwDeviceInterfaceIdCharCount)")] LPWSTR CreatedSwDeviceInterfaceId,
        [in] ULONG CreatedSwDeviceInterfaceIdCharCount
    );

    HRESULT UpdateEndpointProperties(
        [in] LPCWSTR DeviceInterfaceId,
        [in] ULONG IntPropertyCount,
        [in, annotation("_In_")] PVOID InterfaceDevProperties
    );

    HRESULT DeleteEndpointProperties(
        [in] LPCWSTR DeviceInterfaceId,
        [in] ULONG IntPropertyCount,
        [in, annotation("_In_")] PVOID DevPropKeys
    );

    HRESULT DeleteAllEndpointInProtocolDiscoveredProperties(
        [in] LPCWSTR DeviceInterfaceId
    );

    HRESULT DeactivateEndpoint(
        [in] LPCWSTR InstanceId
    );

    HRESULT RemoveEndpoint(
        [in] LPCWSTR InstanceId
    );


    // Update the running configuration for an abstraction or endpoints managed by that abstraction
    HRESULT UpdateAbstractionConfiguration(
        [in] GUID AbstractionId,
        [in] LPCWSTR ConfigurationJson,
        [out] BSTR* Response
    );


};
