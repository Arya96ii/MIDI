// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App API and should be used
// in your Windows application via an official binary distribution.
// Further information: https://github.com/microsoft/MIDI/
// ============================================================================

import "unknwn.idl";
import "mididevicemanagerinterface.idl";

typedef struct
{
    MidiDataFormat DataFormat;
} ABSTRACTIONCREATIONPARAMS, *PABSTRACTIONCREATIONPARAMS;

typedef struct
{
    MidiDataFormat DataFormatIn;
    MidiDataFormat DataFormatOut;
} TRANSFORMCREATIONPARAMS, *PTRANSFORMCREATIONPARAMS;

[
    object,
    local,
    uuid(4D6A29E5-DF4F-4A2D-A923-9B23B3F2D6F6),
    pointer_default(unique)
]
interface IMidiCallback : IUnknown
{
    HRESULT Callback(
        [in] PVOID message,
        [in] UINT size,
        [in] LONGLONG position,
        [in] LONGLONG context
    );
};

[
    object,
    local,
    uuid(EA264200-3328-49E5-8815-73649A8748BE),
    pointer_default(unique)
]
interface IMidiAbstraction : IUnknown
{
    HRESULT Activate(
        [in, annotation("_In_")] REFIID Iid,
        [out, iid_is(Iid), annotation("_COM_Outptr_")] void** Interface
    );
};

[
    object,
    local,
    uuid(6C4B8BF9-8133-4B41-8303-1FDE78E20ACA),
    pointer_default(unique)
]
interface IMidiIn : IUnknown
{
    HRESULT Initialize(
        [in] LPCWSTR deviceId,
        [in] PABSTRACTIONCREATIONPARAMS creationParams,
        [in] DWORD * mmcssTaskId,
        [in] IMidiCallback * callback,
        [in] LONGLONG context
    );

    HRESULT Cleanup();
};

[
    object,
    local,
    uuid(F328D645-7D6D-4924-A7E3-9DEE245189F9),
    pointer_default(unique)
]
interface IMidiOut : IUnknown
{
    HRESULT Initialize(
        [in] LPCWSTR deviceId,
        [in] PABSTRACTIONCREATIONPARAMS creationParams,
        [in] DWORD * mmcssTaskId
    );

    HRESULT Cleanup();

    HRESULT SendMidiMessage(
        [in] PVOID message,
        [in] UINT size,
        [in] LONGLONG position

    );
};

[
    object,
    local,
    uuid(B89BBB45-7001-4BEA-BBD8-C7CC26E7836C),
    pointer_default(unique)
]
interface IMidiBiDi : IUnknown
{
    HRESULT Initialize(
        [in] LPCWSTR deviceId,
        [in] PABSTRACTIONCREATIONPARAMS creationParams,
        [in] DWORD * mmcssTaskId,
        [in] IMidiCallback * callback,
        [in] LONGLONG context
    );

    HRESULT Cleanup();

    HRESULT SendMidiMessage(
        [in] PVOID message,
        [in] UINT size,
        [in] LONGLONG position
    );
};

[
    object,
    local,
    uuid(badff6d2-0e3c-4009-a473-6ba82c008662),
    pointer_default(unique)
]
interface IMidiEndpointManager : IUnknown
{
    HRESULT Initialize(
        [in] IUnknown* midiDeviceManager,
        [in] IUnknown* midiEndpointProtocolManager //,
        /*[in] LPCWSTR configurationJson */
    );

    HRESULT Cleanup();
};

[
    object,
    local,
    uuid(65FA86A4-0433-4DCD-88E4-E565051CAB2D),
    pointer_default(unique)
]
interface IMidiTransform : IUnknown
{
    HRESULT Activate(
        [in, annotation("_In_")] REFIID Iid,
        [out, iid_is(Iid), annotation("_COM_Outptr_")] void** Interface
    );
};

[
    object,
    local,
    uuid(5D2400F0-F2EE-4A51-A3BE-0AC9A19C09C4),
    pointer_default(unique)
]
interface IMidiDataTransform : IUnknown
{
    HRESULT Initialize(
        [in] LPCWSTR deviceId,
        [in] PTRANSFORMCREATIONPARAMS creationParams,
        [in] DWORD * mmcssTaskId,
        [in] IMidiCallback * callback,
        [in] LONGLONG context,
        [in] IUnknown* midiDeviceManager
    );

    HRESULT Cleanup();

    HRESULT SendMidiMessage(
        [in] PVOID message,
        [in] UINT size,
        [in] LONGLONG position
    );
};



// IMidiConfigurationManager for sending config json to 
// an endpoint, transform, or the service at runtime
// The json section sent contains only changes, not the 
// entire configuration for the entity

[
    object,
    local,
    uuid(f19dd642-1809-4497-9eee-f230b11bd6fb),
    pointer_default(unique)
]
interface IMidiAbstractionConfigurationManager : IUnknown
{
    HRESULT Initialize(
        [in] GUID abstractionId,
        [in] IUnknown* midiDeviceManager
    );

    HRESULT UpdateConfiguration(
        [in] LPCWSTR configurationJsonSection,
        [out] BSTR* response
    );

    HRESULT Cleanup();


};