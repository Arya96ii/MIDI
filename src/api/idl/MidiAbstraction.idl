// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App API and should be used
// in your Windows application via an official binary distribution.
// Further information: https://github.com/microsoft/MIDI/
// ============================================================================



import "unknwn.idl";

[
    object,
    local,
    uuid(4D6A29E5-DF4F-4A2D-A923-9B23B3F2D6F6),
    pointer_default(unique)
]
interface IMidiCallback : IUnknown
{
    HRESULT Callback(
        [in] PVOID message,
        [in] UINT size,
        [in] LONGLONG position
    );
};

[
    object,
    local,
    uuid(EA264200-3328-49E5-8815-73649A8748BE),
    pointer_default(unique)
]
interface IMidiAbstraction : IUnknown
{
    HRESULT Activate(
        [in, annotation("_In_")] REFIID Iid,
        [out, iid_is(Iid), annotation("_COM_Outptr_")] void** Interface
    );
};

[
    object,
    local,
    uuid(6C4B8BF9-8133-4B41-8303-1FDE78E20ACA),
    pointer_default(unique)
]
interface IMidiIn : IUnknown
{
    HRESULT Initialize(
        [in] LPCWSTR deviceId,
        [in] DWORD * mmcssTaskId,
        [in] IMidiCallback * callback
    );

    HRESULT Cleanup();
};

[
    object,
    local,
    uuid(F328D645-7D6D-4924-A7E3-9DEE245189F9),
    pointer_default(unique)
]
interface IMidiOut : IUnknown
{
    HRESULT Initialize(
        [in] LPCWSTR deviceId,
        [in] DWORD * mmcssTaskId
    );

    HRESULT Cleanup();

    HRESULT SendMidiMessage(
        [in] PVOID message,
        [in] UINT size,
        [in] LONGLONG position

    );
};

[
    object,
    local,
    uuid(B89BBB45-7001-4BEA-BBD8-C7CC26E7836C),
    pointer_default(unique)
]
interface IMidiBiDi : IUnknown
{
    HRESULT Initialize(
        [in] LPCWSTR deviceId,
        [in] DWORD * mmcssTaskId,
        [in] IMidiCallback * callback
    );

    HRESULT Cleanup();

    HRESULT SendMidiMessage(
        [in] PVOID message,
        [in] UINT size,
        [in] LONGLONG position
    );
};

[
    object,
    local,
    uuid(badff6d2-0e3c-4009-a473-6ba82c008662),
    pointer_default(unique)
]
interface IMidiEndpointManager : IUnknown
{
    HRESULT Initialize(
        [in] IUnknown* midiDeviceManager,
        [in] LPCWSTR configurationJson
    );

    HRESULT Cleanup();
};



[
    object,
    local,
    uuid(fa9d8e0c-c432-4fef-9687-46ee2555bc45),
    pointer_default(unique)
]
interface IMidiServiceMessageProcessingPlugin : IUnknown
{
    HRESULT Initialize(
        [in] IMidiBiDi* deviceSideConnection,
        [in] IMidiBiDi* clientSideConnection,
        [in] LPCWSTR configurationJson
    );

    HRESULT Cleanup();
};



//// This interface exists so apps can create endpoints through the API
//// typically the EndpointManager implements this if API-driven device/endpoint
//// creation is supported. Optional for any transport abstraction. Required for
//// virtual / app-to-app MIDI
//[
//    object,
//    local,
//    uuid(0b56f71c-75b0-4209-8fdc-5cebe8815726),
//    pointer_default(unique)
//]
//interface IMidiApiEndpointManagerExtension : IUnknown
//{
//    HRESULT ApplyConfiguration(         // IMidiEndpointManager could also include a function like this for changing device/endpoint names etc. TBD.
//        [in]LPCWSTR configurationJson,  // typically this contains specs for one or more endpoints and any routing
//        [out]LPWSTR resultJson         // contains Ids of created endpoints, or other status info.
//    );
//
//};
