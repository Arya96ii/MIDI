// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App API and should be used
// in your Windows application via an official binary distribution.
// Further information: https://github.com/microsoft/MIDI/
// ============================================================================



import "unknwn.idl";

[
    object,
    local,
    uuid(4D6A29E5-DF4F-4A2D-A923-9B23B3F2D6F6),
    pointer_default(unique)
]
interface IMidiCallback : IUnknown
{
    HRESULT Callback(
        [in] PVOID message,
        [in] UINT size,
        [in] LONGLONG position
    );
};

[
    object,
    local,
    uuid(EA264200-3328-49E5-8815-73649A8748BE),
    pointer_default(unique)
]
interface IMidiAbstraction : IUnknown
{
    HRESULT Activate(
        [in, annotation("_In_")] REFIID Iid,
        [out, iid_is(Iid), annotation("_COM_Outptr_")] void** Interface
    );
};

[
    object,
    local,
    uuid(6C4B8BF9-8133-4B41-8303-1FDE78E20ACA),
    pointer_default(unique)
]
interface IMidiIn : IUnknown        // IMidiMessageSource
{
    HRESULT Initialize(
        [in] LPCWSTR deviceId,
        [in] DWORD * mmcssTaskId,
        [in] IMidiCallback * callback
    );

    HRESULT Cleanup();
};

[
    object,
    local,
    uuid(F328D645-7D6D-4924-A7E3-9DEE245189F9),
    pointer_default(unique)
]
interface IMidiOut : IUnknown       // IMidiMessageDestination
{
    HRESULT Initialize(
        [in] LPCWSTR deviceId,
        [in] DWORD * mmcssTaskId
    );

    HRESULT Cleanup();

    HRESULT SendMidiMessage(
        [in] PVOID message,
        [in] UINT size,
        [in] LONGLONG position

    );
};

[
    object,
    local,
    uuid(B89BBB45-7001-4BEA-BBD8-C7CC26E7836C),
    pointer_default(unique)
]
interface IMidiBiDi : IUnknown
{
    HRESULT Initialize(
        [in] LPCWSTR deviceId,
        [in] DWORD * mmcssTaskId,
        [in] IMidiCallback * callback
    );

    HRESULT Cleanup();

    HRESULT SendMidiMessage(
        [in] PVOID message,
        [in] UINT size,
        [in] LONGLONG position
    );
};

[
    object,
    local,
    uuid(badff6d2-0e3c-4009-a473-6ba82c008662),
    pointer_default(unique)
]
interface IMidiEndpointManager : IUnknown
{
    HRESULT Initialize(
        [in] IUnknown* midiDeviceManager,
        [in] LPCWSTR configurationJson
    );

    HRESULT Cleanup();
};


[
    object,
    local,
    uuid(78f73647-2c32-420e-8259-a207c546b2c3),
    pointer_default(unique)
]
interface IMidiTransform : IUnknown
{
    HRESULT Initialize(
        [in] IMidiCallback* callback
    );

    HRESULT Cleanup();

    HRESULT SendMidiMessage(
        [in] PVOID message,
        [in] UINT size,
        [in] LONGLONG position
    );
};




//[
//    object,
//    local,
//    uuid(fa9d8e0c-c432-4fef-9687-46ee2555bc45),
//    pointer_default(unique)
//]
//interface IMidiServiceMessageProcessingPlugin : IUnknown
//{
//    // TODO: Maybe this should follow the IMidiEndpointManager approach and have a service-side equivalent
//    // of the device manager, but for plugins. That would simplify this interface and keep the pattern
//    // consistent with other abstractions. They are not exactly the same, of course, because the
//    // plugin manager would be requesting plugin instances, not the other way around.
//    HRESULT Initialize(
//        [in] GUID pluginInstanceId,
//        [in] IUnknown* midiDeviceManager,       // needed for any plugins that will update device properties
//        [in] LPCWSTR deviceId,                  // needed if the plugin has to alter behavior based on device properties
//        [in] LPCWSTR clientId,                  // If this is a client-side plugin, need some way to get settings, associate abstractions, etc.
//        [in] BYTE midiInDataFormat,             // bytestream or UMP. Use same MIDI_PROP_NATIVEDATAFORMAT_xxx constants as are stored in PnP properties
//        [in] BYTE midiOutDataFormat             // bytestream or UMP. Use same MIDI_PROP_NATIVEDATAFORMAT_xxx constants as are stored in PnP properties
//        );
//  
//    HRESULT ApplyConfiguration(                 // used during initial setup, but also whenever any changes are made to config
//        [in] GUID pluginInstanceId,
//        [in] LPCWSTR configurationJson
//    );
//
//    HRESULT Cleanup();
//};

